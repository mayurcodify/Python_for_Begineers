# Importing time module to calculate overal execution time
import time   #in-build modeule
start = time.time()

# Get login user details
import getpass
user = getpass.getuser()

# Importing Pandas Library for reading .csv files
import pandas as pd   #pip install pandas

# Importing datetime modelue
from datetime import datetime, timedelta   #in-build modeule
today = datetime.now()
today_str = today.strftime('%d.%m.%y')

# Code for logging the print statements in Log.txt
import logging   #in-build modeule
logging.basicConfig(filename = "Log_File.TXT",  format = '%(message)s',  filemode = 'w')  # Create and configure logger
logger = logging.getLogger()  # Create an object
logger.setLevel(logging.INFO)  # Set the threshold of logger to INFO

logger.info(f"Login user : {user}")

# Code to download Old_data.txt from Git repository [****It's working code but due to security concerns GIT is not used****]
# from github import Github   #pip install PyGithub, requests
# g = Github('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')  # Git Account Token
# repo = g.get_repo('mayurcodify/Python_for_Begineers')  # Git Repository
# contents = repo.get_contents('Old_data.txt')  # File name present in Git repo to be downloaded
# decoded = contents.decoded_content
# path = "C:/Daily_Report_ELSADCP/Old_data.txt"   # Path with file name to be created with the content from Git repo
# with open(path, 'wb') as f:
#     f.write(decoded)

# Code to delete the excel sheet
import os  # in-build module
path = "C:/Daily_Report_ELSADCP/"
for x in os.listdir(path):
    if x.endswith(".xlsx"):
        #print(x)
        #print(path+x)
        os.remove(path+x)

# Code to download excel data from Git repository [****It's working code but due to security concerns GIT is not used****]
# from github import Github   #pip install PyGithub, requests
# g = Github('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')  # Git Account Token
# repo = g.get_repo('mayurcodify/Python_for_Begineers')  # Git Repository
# contents = repo.get_contents('Daily_Job_Checklist_ELSADCP.xlsx')  # File name present in Git repo to be downloaded
# decoded = contents.decoded_content
# path = "C:/Daily_Report_ELSADCP/Daily_Job_Checklist_ELSADCP.xlsx"   # Path with file name to be created with the content from Git repo
# with open(path, 'wb') as f:
#     f.write(decoded)

# Renaming the excel file name with latest date
path = "C:/Daily_Report_ELSADCP/"
new_file = "Daily_Job_Checklist_ELSADCP_"+today.strftime('%d.%m.%Y')+".xlsx"
new_filename = path+new_file

# Copy the files from Ondrive shared location to local directory
import shutil
old_date_path = f"C:/Users/{user}/OneDrive - Accenture/Daily_Report" + '/Old_data.txt'
excel_path = f"C:/Users/{user}/OneDrive - Accenture/Daily_Report" + '/Daily_Job_Checklist_ELSADCP.xlsx'
rvs_files_path = f"C:/Users/{user}/OneDrive - Accenture/Daily_Report" + '/RVS_Files.txt'
shutil.copyfile(old_date_path, 'C:/Daily_Report_ELSADCP/Old_data.txt')
shutil.copyfile(excel_path, new_filename)
shutil.copyfile(rvs_files_path, 'C:/Daily_Report_ELSADCP/RVS_Files.txt')

# Columns defined for the RVS files
columns = ['Number','Direction','Filename','Queued','Start_Time','Counter','Date','Time','Status']

# Reading RVS_N1L.txt via pandas library
df_N1L = pd.read_csv('C:/Daily_Report_ELSADCP/RVS_N1L.txt', sep = ';', names = columns, skipinitialspace = True, skiprows = 5, encoding = 'unicode_escape')
#print(df_N1L.head(10))
df_N1L.drop(['Number', 'Direction', 'Queued', 'Start_Time', 'Counter', 'Time'], axis = 1, inplace = True)  # Drop the un-necessory columns
#print(df_N1L.head(10))
#df_N1L.rename(columns = {'Dateiname':'Filename','Beendet':'Export_date'}, inplace = True)
#print(df_N1L.head(10))
df_N1L['Filename'] = df_N1L['Filename'].str.strip()  # Removing the extra spaces from columns
#print(df_N1L.head(20))
data_N1L = df_N1L.values.tolist()  # Converting dataframe into list
data_N1L.reverse()  # Reversing the list
#print(data_N1L)

# Reading RVS_KT6.txt via pandas library
df_KT6 = pd.read_csv("C:/Daily_Report_ELSADCP/RVS_KT6.txt", sep = ';', names = columns, skipinitialspace = True, skiprows = 4, encoding = 'unicode_escape')
#print(df_KT6.head(10))
df_KT6.drop(['Number', 'Direction', 'Queued', 'Start_Time', 'Counter', 'Time'], axis = 1, inplace = True)  # Drop the un-necessory columns
#print(df_KT6.head(10))
#df_KT6.rename(columns = {'Dateiname':'Filename','Beendet':'Export_date'}, inplace = True)
#print(df_KT6.head(10))
df_KT6['Filename'] = df_KT6['Filename'].str.strip()  # Removing the extra spaces from columns
#print(df_KT6.head(50))
data_KT6 = df_KT6.values.tolist()  # Converting dataframe into list
data_KT6.reverse()  # Reversing the list
#print(data_KT6)

# Code for converting counter into six question marks present in RVS files
for file in data_N1L:
    if "N1LKT6" in file[0] or "N1LN3L.WT" in file[0] :
        #print(file)
        digits = file[0].split('.')[-2]
        #print(digits)
        if any(chr.isdigit() for chr in digits) :
            file[0] = file[0].replace(digits,'??????',1)
            #print(file[0])

# Code for converting counter into six question marks present in RVS files
for file in data_KT6:
    if "N3LKT6" in file[0] :
        #print(file)
        digits = file[0].split('.')[-2]
        #print(digits)
        if any(chr.isdigit() for chr in digits) :
            file[0] = file[0].replace(digits,'??????',1)
            #print(file[0])

# Reading RVS_Files.txt via pandas library
df_RVS_files = pd.read_csv("C:/Daily_Report_ELSADCP/RVS_Files.txt", sep=',', names=['Type','Filename'], header=None)
#print(df_RVS_files.head(21))
RVS_files = df_RVS_files.values.tolist()  # Converting dataframe into list
# print(RVS_files)

# Reading Old_data.txt via pandas library
df_old_data = pd.read_csv("C:/Daily_Report_ELSADCP/Old_data.txt", sep=',', names=['Filename','Export_date'], header=None)
#print(df_old_data.head(20))
old_data = df_old_data.values.tolist()  # Converting dataframe into list
#print(old_data)

# <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< Code for SLP Laodline >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> #

# Defining SLP lists
SLP_DB_export_files = []
SLP_APP_export_files = []
SLP_APP_import_files = []

# Reading RVS_files.txt and appending the RVS files in respecitve lists based on DB export, APP export & APP import
for file in RVS_files:
    if file[0] == 'SLP_DB_Export' and ".N1L" in file[1]:
        SLP_DB_export_files.append(file[1])
    elif file[0] == 'SLP_APP_Export' and ".KT6" in file[1]:
        SLP_APP_export_files.append(file[1])
    elif file[0] == 'SLP_APP_Import' and "KT6." in file[1]:
        SLP_APP_import_files.append(file[1])
    else:
        pass

# Code for updating SLP_DB_Export_Files
SLP_export_result = []
for db_file in SLP_DB_export_files:
    flag = 0
    #print("export_file is")
    #print(db_file)
    for d in data_N1L:
         if db_file in d[0] and d[2] == 'END':
             #print("within if")
             #print(d[0]+' : '+d[1])
             SLP_export_result.append(d[0]+' : last exported on '+d[1])
             flag = 1
             for x in old_data:
                 #print("in old_data")
                 #print(x)
                 if db_file in x[0]:
                     x[1] = d[1]
                     #print('old_data '+ x[0]+' : '+x[1])
                     #print(old_data)
             break
         else:
             if db_file in d[0] and d[2] != 'END':
                 #print(d[0]+' : '+d[1])
                 if d[1] != today_str:
                     SLP_export_result.append(d[0]+' : No new file export and issue in file delivery on '+d[1])
                 else:
                     SLP_export_result.append(d[0]+' : Issue in file delivery on '+d[1])
                 flag = 1
                 break

# Getting RVS file's export date from Old_data.txt which is not in RVSWEB
    if flag == 0:
        for m in old_data:
            if db_file in m[0]:
                #print(m[0]+' : '+m[1])
                SLP_export_result.append(m[0]+' : last exported on '+m[1])

# Code for updating SLP_APP_Export_Files
for app_file in SLP_APP_export_files:
    flag = 0
    #print("export_file is")
    #print(app_file)
    for d in data_KT6:
         if app_file in d[0] and d[2] == 'END':
             #print("within if")
             #print(d[0]+' : '+d[1])
             SLP_export_result.append(d[0]+' : last exported on '+d[1])
             flag = 1
             for x in old_data:
                 #print("in old_data")
                 #print(x)
                 if app_file in x[0]:
                     x[1] = d[1]
                     #print('old_data '+ x[0]+' : '+x[1])
                     #print(old_data)
             break
         else:
             if app_file in d[0] and d[2] != 'END':
                #print("within if")
                #print(d[0]+' : '+d[1])
                if d[1] != today_str:
                    SLP_export_result.append(d[0]+' : No new file export and issue in file delivery on '+d[1])
                else:
                    SLP_export_result.append(d[0]+' : Issue in file delivery on '+d[1])
                flag = 1
                break

# Getting RVS file's export date from Old_data.txt which is not in RVSWEB
    if flag == 0:
        for m in old_data:
            if app_file in m[0]:
                #print(m[0]+' : '+m[1])
                SLP_export_result.append(m[0]+' : last exported on '+m[1])

# Code for updating SLP_APP_Import_Files
SLP_import_result = []
for import_file in SLP_APP_import_files:
    flag = 0
    #print("export_file is")
    #print(import_file)
    for d in data_KT6:
         if import_file in d[0] and d[2] == 'END':
             #print("within if")
             #print(d[0]+' : '+d[1])
             SLP_import_result.append(d[0]+' : last exported on '+d[1])
             flag = 1
             for x in old_data:
                 #print("in old_data")
                 #print(x)
                 if import_file in x[0]:
                     x[1] = d[1]
                     #print('old_data '+ x[0]+' : '+x[1])
                     #print(old_data)
             break
         else:
             if import_file in d[0] and d[2] != 'END':
                #print("within if")
                #print(d[0]+' : '+d[1])
                if d[1] != today_str:
                    SLP_import_result.append(d[0]+' : No new file export and issue in file delivery on '+d[1])
                else:
                    SLP_import_result.append(d[0]+' : Issue in file delivery on '+d[1])
                flag = 1
                break

# Getting RVS file's import date from Old_data.txt which is not in RVSWEB
    if flag == 0:
        for m in old_data:
            if import_file in m[0]:
                #print(m[0]+' : '+m[1])
                SLP_import_result.append(m[0]+' : last exported on '+m[1])

# Final SLP lists having RVS filenames with updated date
SLP_export_final_result = '\n'.join(SLP_export_result)
logger.info("<<<<<<<<<< SLP EXPORT RVS FILES >>>>>>>>>>")
logger.info(SLP_export_final_result)
logger.info("")

SLP_import_final_result = '\n'.join(SLP_import_result)
logger.info("<<<<<<<<<< SLP IMPORT RVS FILES >>>>>>>>>>")
logger.info(SLP_import_final_result)
logger.info("")

# <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< Code for KDS Laodline >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> #

# Defining KDS lists
KDS_DB_export_files = []
KDS_APP_export_files = []
KDS_APP_import_files = []

# Reading RVS_files.txt and appending the RVS files in respecitve lists based on DB export, APP export & APP import
for file in RVS_files:
    if file[0] == 'KDS_DB_Export' and ".N1L" in file[1]:
        KDS_DB_export_files.append(file[1])
    elif file[0] == 'KDS_APP_Export' and ".KT6" in file[1]:
        KDS_APP_export_files.append(file[1])
    elif file[0] == 'KDS_APP_Import' and "KT6." in file[1]:
        KDS_APP_import_files.append(file[1])
    else:
        pass

# Code for updating KDS_DB_Export_Files
KDS_export_result = []
for db_file in KDS_DB_export_files:
    flag = 0
    #print("export_file is")
    #print(db_file)
    for d in data_N1L:
         if db_file in d[0] and d[2] == 'END':
             #print("within if")
             #print(d[0]+' : '+d[1])
             KDS_export_result.append(d[0]+' : last exported on '+d[1])
             flag = 1
             for x in old_data:
                 #print("in old_data")
                 #print(x)
                 if db_file in x[0]:
                     x[1] = d[1]
                     #print('old_data '+ x[0]+' : '+x[1])
                     #print(old_data)
             break
         else:
             if db_file in d[0] and d[2] != 'END':
                 #print("within if")
                 #print(d[0]+' : '+d[1])
                 if d[1] != today_str:
                     KDS_export_result.append(d[0]+' : No new file export and issue in file delivery on '+d[1])
                 else:
                     KDS_export_result.append(d[0]+' : Issue in file delivery on '+d[1])
                 flag = 1
                 break

# Getting RVS file's export date from Old_data.txt which is not in RVSWEB
    if flag == 0:
        for m in old_data:
            if db_file in m[0]:
                #print(m[0]+' : '+m[1])
                KDS_export_result.append(m[0]+' : last exported on '+m[1])

# Code for updating KDS_APP_Export_Files
for app_file in KDS_APP_export_files:
    flag = 0
    #print("export_file is")
    #print(app_file)
    for d in data_KT6:
         if app_file in d[0] and d[2] == 'END':
             #print("within if")
             #print(d[0]+' : '+d[1])
             KDS_export_result.append(d[0]+' : last exported on '+d[1])
             flag = 1
             for x in old_data:
                 #print("in old_data")
                 #print(x)
                 if app_file in x[0]:
                     x[1] = d[1]
                     #print('old_data '+ x[0]+' : '+x[1])
                     #print(old_data)
             break
         else:
             if app_file in d[0] and d[2] != 'END':
                #print("within if")
                #print(d[0]+' : '+d[1])
                if d[1] != today_str:
                    KDS_export_result.append(d[0]+' : No new file export and issue in file delivery on '+d[1])
                else:
                    KDS_export_result.append(d[0]+' : Issue in file delivery on '+d[1])
                flag = 1
                break

# Getting RVS file's export date from Old_data.txt which is not in RVSWEB
    if flag == 0:
        for m in old_data:
            if app_file in m[0]:
                #print(m[0]+' : '+m[1])
                KDS_export_result.append(m[0]+' : last exported on '+m[1])

# Code for updating KDS_APP_Import_Files
KDS_import_result = []
for import_file in KDS_APP_import_files:
    flag = 0
    #print("export_file is")
    #print(import_file)
    for d in data_KT6:
         if import_file in d[0] and d[2] == 'END':
             #print("within if")
             #print(d[0]+' : '+d[1])
             KDS_import_result.append(d[0]+' : last exported on '+d[1])
             flag = 1
             for x in old_data:
                 #print("in old_data")
                 #print(x)
                 if import_file in x[0]:
                     x[1] = d[1]
                     #print('old_data '+ x[0]+' : '+x[1])
                     #print(old_data)
             break
         else:
             if import_file in d[0] and d[2] != 'END':
                #print("within if")
                #print(d[0]+' : '+d[1])
                if d[1] != today_str:
                    KDS_import_result.append(d[0]+' : No new file export and issue in file delivery on '+d[1])
                else:
                    KDS_import_result.append(d[0]+' : Issue in file delivery on '+d[1])
                flag = 1
                break

# Getting RVS file's import date from Old_data.txt which is not in RVSWEB
    if flag == 0:
        for m in old_data:
            if import_file in m[0]:
                #print(m[0]+' : '+m[1])
                KDS_import_result.append(m[0]+' : last exported on '+m[1])

# Final KDS lists having RVS filenames with updated date
KDS_export_final_result = '\n'.join(KDS_export_result)
logger.info("<<<<<<<<<< KDS EXPORT RVS FILES >>>>>>>>>>")
logger.info(KDS_export_final_result)
logger.info("")

KDS_import_final_result = '\n'.join(KDS_import_result)
logger.info("<<<<<<<<<< KDS IMPORT RVS FILES >>>>>>>>>>")
logger.info(KDS_import_final_result)
logger.info("")

# <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< Code for SNK Laodline >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> #

# Defining SNK lists
SNK_DB_export_files = []
SNK_APP_export_files = []
SNK_APP_import_files = []

# Reading RVS_files.txt and appending the RVS files in respecitve lists based on DB export, APP export & APP import
for file in RVS_files:
    if file[0] == 'SNK_DB_Export' and ".N1L" in file[1]:
        SNK_DB_export_files.append(file[1])
    elif file[0] == 'SNK_APP_Export' and ".KT6" in file[1]:
        SNK_APP_export_files.append(file[1])
    elif file[0] == 'SNK_APP_Import' and "KT6." in file[1]:
        SNK_APP_import_files.append(file[1])
    else:
        pass

# Code for updating SNK_DB_Export_Files
SNK_export_result = []
for db_file in SNK_DB_export_files:
    flag = 0
    #print("export_file is")
    #print(db_file)
    for d in data_N1L:
         if db_file in d[0] and d[2] == 'END':
             #print("within if")
             #print(d[0]+' : '+d[1])
             SNK_export_result.append(d[0]+' : last exported on '+d[1])
             flag = 1
             for x in old_data:
                 #print("in old_data")
                 #print(x)
                 if db_file in x[0]:
                     x[1] = d[1]
                     #print('old_data '+ x[0]+' : '+x[1])
                     #print(old_data)
             break
         else:
             if db_file in d[0] and d[2] != 'END':
                 #print("within if")
                 #print(d[0]+' : '+d[1])
                 if d[1] != today_str:
                     SNK_export_result.append(d[0]+' : No new file export and issue in file delivery on '+d[1])
                 else:
                     SNK_export_result.append(d[0]+' : Issue in file delivery on '+d[1])
                 flag = 1
                 break

# Getting RVS file's export date from Old_data.txt which is not in RVSWEB
    if flag == 0:
        for m in old_data:
            if db_file in m[0]:
                #print(m[0]+' : '+m[1])
                SNK_export_result.append(m[0]+' : last exported on '+m[1])

# Code for updating SNK_APP_Export_Files
for app_file in SNK_APP_export_files:
    flag = 0
    #print("export_file is")
    #print(app_file)
    for d in data_KT6:
         if app_file in d[0] and d[2] == 'END':
             #print("within if")
             #print(d[0]+' : '+d[1])
             SNK_export_result.append(d[0]+' : last exported on '+d[1])
             flag = 1
             for x in old_data:
                 #print("in old_data")
                 #print(x)
                 if app_file in x[0]:
                     x[1] = d[1]
                     #print('old_data '+ x[0]+' : '+x[1])
                     #print(old_data)
             break
         else:
             if app_file in d[0] and d[2] != 'END':
                #print("within if")
                #print(d[0]+' : '+d[1])
                if d[1] != today_str:
                    SNK_export_result.append(d[0]+' : No new file export and issue in file delivery on '+d[1])
                else:
                    SNK_export_result.append(d[0]+' : Issue in file delivery on '+d[1])
                flag = 1
                break

# Getting RVS file's export date from Old_data.txt which is not in RVSWEB
    if flag == 0:
        for m in old_data:
            if app_file in m[0]:
                #print(m[0]+' : '+m[1])
                SNK_export_result.append(m[0]+' : last exported on '+m[1])

# Code for updating SNK_APP_Import_Files
SNK_import_result = []
for import_file in SNK_APP_import_files:
    flag = 0
    #print("export_file is")
    #print(import_file)
    for d in data_KT6:
         if import_file in d[0] and d[2] == 'END':
             #print("within if")
             #print(d[0]+' : '+d[1])
             SNK_import_result.append(d[0]+' : last exported on '+d[1])
             flag = 1
             for x in old_data:
                 #print("in old_data")
                 #print(x)
                 if import_file in x[0]:
                     x[1] = d[1]
                     #print('old_data '+ x[0]+' : '+x[1])
                     #print(old_data)
             break
         else:
             if import_file in d[0] and d[2] != 'END':
                #print("within if")
                #print(d[0]+' : '+d[1])
                if d[1] != today_str:
                    SNK_import_result.append(d[0]+' : No new file export and issue in file delivery on '+d[1])
                else:
                    SNK_import_result.append(d[0]+' : Issue in file delivery on '+d[1])
                flag = 1
                break

# Getting RVS file's import date from Old_data.txt which is not in RVSWEB
    if flag == 0:
        for m in old_data:
            if import_file in m[0]:
                #print(m[0]+' : '+m[1])
                SNK_import_result.append(m[0]+' : last exported on '+m[1])

# Final SNK lists having RVS filenames with updated date
SNK_export_final_result = '\n'.join(SNK_export_result)
logger.info("<<<<<<<<<< SNK EXPORT RVS FILES >>>>>>>>>>")
logger.info(SNK_export_final_result)
logger.info("")

SNK_import_final_result = '\n'.join(SNK_import_result)
logger.info("<<<<<<<<<< SNK IMPORT RVS FILES >>>>>>>>>>")
logger.info(SNK_import_final_result)
logger.info("")

# <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< Code for WI Laodline >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> #

# Defining WI lists
WI_DB_export_files = []
WI_APP_export_files = []
WI_APP_import_files = []

# Reading RVS_files.txt and appending the RVS files in respecitve lists based on DB export, APP export & APP import
for file in RVS_files:
    if file[0] == 'WI_DB_Export' and ".N1L" in file[1]:
        WI_DB_export_files.append(file[1])
    elif file[0] == 'WI_APP_Export' and ".KT6" in file[1]:
        WI_APP_export_files.append(file[1])
    elif file[0] == 'WI_APP_Import' and "KT6." in file[1]:
        WI_APP_import_files.append(file[1])
    else:
        pass

# Code for updating WI_DB_Export_Files
WI_export_result = []
for db_file in WI_DB_export_files:
    flag = 0
    #print("export_file is")
    #print(db_file)
    for d in data_N1L:
         if db_file in d[0] and d[2] == 'END':
             #print("within if")
             #print(d[0]+' : '+d[1])
             WI_export_result.append(d[0]+' : last exported on '+d[1])
             flag = 1
             for x in old_data:
                 #print("in old_data")
                 #print(x)
                 if db_file in x[0]:
                     x[1] = d[1]
                     #print('old_data '+ x[0]+' : '+x[1])
                     #print(old_data)
             break
         else:
             if db_file in d[0] and d[2] != 'END':
                 #print("within if")
                 #print(d[0]+' : '+d[1])
                 if d[1] != today_str:
                     WI_export_result.append(d[0]+' : No new file export and issue in file delivery on '+d[1])
                 else:
                     WI_export_result.append(d[0]+' : Issue in file delivery on '+d[1])
                 flag = 1
                 break

# Getting RVS file's export date from Old_data.txt which is not in RVSWEB
    if flag == 0:
        for m in old_data:
            if db_file in m[0]:
                #print(m[0]+' : '+m[1])
                WI_export_result.append(m[0]+' : last exported on '+m[1])

# Code for updating WI_APP_Export_Files
for app_file in WI_APP_export_files:
    flag = 0
    #print("export_file is")
    #print(app_file)
    for d in data_KT6:
         if app_file in d[0] and d[2] == 'END':
             #print("within if")
             #print(d[0]+' : '+d[1])
             WI_export_result.append(d[0]+' : last exported on '+d[1])
             flag = 1
             for x in old_data:
                 #print("in old_data")
                 #print(x)
                 if app_file in x[0]:
                     x[1] = d[1]
                     #print('old_data '+ x[0]+' : '+x[1])
                     #print(old_data)
             break
         else:
             if app_file in d[0] and d[2] != 'END':
                #print("within if")
                #print(d[0]+' : '+d[1])
                if d[1] != today_str:
                    WI_export_result.append(d[0]+' : No new file export and issue in file delivery on '+d[1])
                else:
                    WI_export_result.append(d[0]+' : Issue in file delivery on '+d[1])
                flag = 1
                break

# Getting RVS file's export date from Old_data.txt which is not in RVSWEB
    if flag == 0:
        for m in old_data:
            if app_file in m[0]:
                #print(m[0]+' : '+m[1])
                WI_export_result.append(m[0]+' : last exported on '+m[1])

# Code for updating WI_APP_Import_Files
WI_import_result = []
for import_file in WI_APP_import_files:
    flag = 0
    #print("export_file is")
    #print(import_file)
    for d in data_KT6:
         if import_file in d[0] and d[2] == 'END':
             #print("within if")
             #print(d[0]+' : '+d[1])
             WI_import_result.append(d[0]+' : last exported on '+d[1])
             flag = 1
             for x in old_data:
                 #print("in old_data")
                 #print(x)
                 if import_file in x[0]:
                     x[1] = d[1]
                     #print('old_data '+ x[0]+' : '+x[1])
                     #print(old_data)
             break
         else:
             if import_file in d[0] and d[2] != 'END':
                #print("within if")
                #print(d[0]+' : '+d[1])
                if d[1] != today_str:
                    WI_import_result.append(d[0]+' : No new file export and issue in file delivery on '+d[1])
                else:
                    WI_import_result.append(d[0]+' : Issue in file delivery on '+d[1])
                flag = 1
                break

# Getting RVS file's import date from Old_data.txt which is not in RVSWEB
    if flag == 0:
        for m in old_data:
            if import_file in m[0]:
                #print(m[0]+' : '+m[1])
                WI_import_result.append(m[0]+' : last exported on '+m[1])

# Final WI lists having RVS filenames with updated date
WI_export_final_result = '\n'.join(WI_export_result)
logger.info("<<<<<<<<<< WI EXPORT RVS FILES >>>>>>>>>>")
logger.info(WI_export_final_result)
logger.info("")

WI_import_final_result = '\n'.join(WI_import_result)
logger.info("<<<<<<<<<< WI IMPORT RVS FILES >>>>>>>>>>")
logger.info(WI_import_final_result)
logger.info("")

# <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< Code for FOD Laodline >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> #

# Defining FOD lists
FOD_DB_export_files = []

# Reading RVS_files.txt and appending the RVS files in respecitve lists based on DB export
for file in RVS_files:
    if file[0] == 'FOD_DB_Export' and ".N1L" in file[1]:
        FOD_DB_export_files.append(file[1])
    else:
        pass

# Code for updating FOD_DB_Export_Files
FOD_export_result = []
for db_file in FOD_DB_export_files:
    flag = 0
    #print("export_file is")
    #print(db_file)
    for d in data_N1L:
         if db_file in d[0] and d[2] == 'END':
             #print("within if")
             #print(d[0]+' : '+d[1])
             FOD_export_result.append(d[0]+' : last exported on '+d[1])
             flag = 1
             for x in old_data:
                 #print("in old_data")
                 #print(x)
                 if db_file in x[0]:
                     x[1] = d[1]
                     #print('old_data '+ x[0]+' : '+x[1])
                     #print(old_data)
             break
         else:
             if db_file in d[0] and d[2] != 'END':
                 #print("within if")
                 #print(d[0]+' : '+d[1])
                 if d[1] != today_str:
                     FOD_export_result.append(d[0]+' : No new file export and issue in file delivery on '+d[1])
                 else:
                     FOD_export_result.append(d[0]+' : Issue in file delivery on '+d[1])
                 flag = 1
                 break

# Getting RVS file's export date from Old_data.txt which is not in RVSWEB
    if flag == 0:
        for m in old_data:
            if db_file in m[0]:
                #print(m[0]+' : '+m[1])
                FOD_export_result.append(m[0]+' : last exported on '+m[1])

# Final FOD lists having RVS filenames with updated date
FOD_export_final_result = '\n'.join(FOD_export_result)
logger.info("<<<<<<<<<< FOD EXPORT RVS FILES >>>>>>>>>>")
logger.info(FOD_export_final_result)
logger.info("")

# <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< Code for TRANS Laodline >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> #

# Defining TRANS lists
TRANS_DB_export_files = []
TRANS_APP_import_files = []

# Reading RVS_files.txt and appending the RVS files in respecitve lists based on DB export & APP import
for file in RVS_files:
    if file[0] == 'TRANS_DB_Export' and ".N1L" in file[1]:
        TRANS_DB_export_files.append(file[1])
    elif file[0] == 'TRANS_APP_Import' and "ElsaPro" in file[1]:
        TRANS_APP_import_files.append(file[1])
    else:
        pass

# Code for updating TRANS_DB_Export_Files
TRANS_export_result = []
for db_file in TRANS_DB_export_files:
    flag = 0
    #print("export_file is")
    #print(db_file)
    for d in data_N1L:
         if db_file in d[0] and d[2] == 'END':
             #print("within if")
             #print(d[0]+' : '+d[1])
             TRANS_export_result.append(d[0]+' : last exported on '+d[1])
             flag = 1
             for x in old_data:
                 #print("in old_data")
                 #print(x)
                 if db_file in x[0]:
                     x[1] = d[1]
                 if db_file == 'DEL.N1LN3L.TRANS.F.GPD.DMP':
                     if 'ElsaPro-GUI_<language>.xml' in x[0]:  # Import file [ElsaPro-GUI_<language>.xml] hard coded
                         #print(x[0])
                         x[1] = d[1]
                         #print(x[1])
                     #print('old_data '+ x[0]+' : '+x[1])
                     #print(old_data)
             break
         else:
             if db_file in d[0] and d[2] != 'END':
                 #print("within if")
                 #print(d[0]+' : '+d[1])
                 if d[1] != today_str:
                     TRANS_export_result.append(d[0]+' : No new file export and issue in file delivery on '+d[1])
                 else:
                     TRANS_export_result.append(d[0]+' : Issue in file delivery on '+d[1])
                 flag = 1
                 break

# Getting RVS file's export date from Old_data.txt which is not in RVSWEB
    if flag == 0:
        for m in old_data:
            if db_file in m[0]:
                #print(m[0]+' : '+m[1])
                TRANS_export_result.append(m[0]+' : last exported on '+m[1])

# Code for updating TRANS_APP_Import_Files
TRANS_import_result = []
for import_file in TRANS_APP_import_files:
    flag = 0
    #print("export_file is")
    #print(import_file)
    for d in data_KT6:
         if import_file in d[0] and d[2] == 'END':
             #print("within if")
             #print(d[0]+' : '+d[1])
             TRANS_import_result.append(d[0]+' : last exported on '+d[1])
             flag = 1
             for x in old_data:
                 #print("in old_data")
                 #print(x)
                 if import_file in x[0]:
                     x[1] = d[1]
                     #print('old_data '+ x[0]+' : '+x[1])
                     #print(old_data)
             break
         else:
             if import_file in d[0] and d[2] != 'END':
                #print("within if")
                #print(d[0]+' : '+d[1])
                if d[1] != today_str:
                    TRANS_import_result.append(d[0]+' : No new file export and issue in file delivery on '+d[1])
                else:
                    TRANS_import_result.append(d[0]+' : Issue in file delivery on '+d[1])
                flag = 1
                break

# Getting RVS file's import date from Old_data.txt which is not in RVSWEB
    if flag == 0:
        for m in old_data:
            if import_file in m[0]:
                #print(m[0]+' : '+m[1])
                TRANS_import_result.append(m[0]+' : last exported on '+m[1])

# Final TRANS lists having RVS filenames with updated date
TRANS_export_final_result = '\n'.join(TRANS_export_result)
logger.info("<<<<<<<<<< TRANS EXPORT RVS FILES >>>>>>>>>>")
logger.info(TRANS_export_final_result)
logger.info("")

TRANS_import_final_result = '\n'.join(TRANS_import_result)
logger.info("<<<<<<<<<< TRANS IMPORT RVS FILES >>>>>>>>>>")
logger.info(TRANS_import_final_result)
logger.info("")

# <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< Code for TPI Laodline >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> #

# Defining TPI lists
TPI_DB_export_files = []
TPI_APP_export_files = []
TPI_APP_import_files = []

# Reading RVS_files.txt and appending the RVS files in respecitve lists based on DB export, APP export & APP import
for file in RVS_files:
    if file[0] == 'TPI_DB_Export' and ".N1L" in file[1]:
        TPI_DB_export_files.append(file[1])
    elif file[0] == 'TPI_APP_Export' and ".KT6" in file[1]:
        TPI_APP_export_files.append(file[1])
    elif file[0] == 'TPI_APP_Import' and "KT6." in file[1]:
        TPI_APP_import_files.append(file[1])
    else:
        pass

# Code for updating TPI_DB_Export_Files
TPI_export_result = []
for db_file in TPI_DB_export_files:
    flag = 0
    #print("export_file is")
    #print(db_file)
    for d in data_N1L:
         if db_file in d[0] and d[2] == 'END':
             #print("within if")
             #print(d[0]+' : '+d[1])
             TPI_export_result.append(d[0]+' : last exported on '+d[1])
             flag = 1
             for x in old_data:
                 #print("in old_data")
                 #print(x)
                 if db_file in x[0]:
                     x[1] = d[1]
                     #print('old_data '+ x[0]+' : '+x[1])
                     #print(old_data)
             break
         else:
             if db_file in d[0] and d[2] != 'END':
                 #print("within if")
                 #print(d[0]+' : '+d[1])
                 if d[1] != today_str:
                     TPI_export_result.append(d[0]+' : No new file export and issue in file delivery on '+d[1])
                 else:
                     TPI_export_result.append(d[0]+' : Issue in file delivery on '+d[1])
                 flag = 1
                 break

# Getting RVS file's export date from Old_data.txt which is not in RVSWEB
    if flag == 0:
        for m in old_data:
            if db_file in m[0]:
                #print(m[0]+' : '+m[1])
                TPI_export_result.append(m[0]+' : last exported on '+m[1])

# Code for updating TPI_APP_Export_Files
for app_file in TPI_APP_export_files:
    flag = 0
    #print("export_file is")
    #print(app_file)
    for d in data_KT6:
         if app_file in d[0] and d[2] == 'END':
             #print("within if")
             #print(d[0]+' : '+d[1])
             TPI_export_result.append(d[0]+' : last exported on '+d[1])
             flag = 1
             for x in old_data:
                 #print("in old_data")
                 #print(x)
                 if app_file in x[0]:
                     x[1] = d[1]
                     #print('old_data '+ x[0]+' : '+x[1])
                     #print(old_data)
             break
         else:
             if app_file in d[0] and d[2] != 'END':
                #print("within if")
                #print(d[0]+' : '+d[1])
                if d[1] != today_str:
                    TPI_export_result.append(d[0]+' : No new file export and issue in file delivery on '+d[1])
                else:
                    TPI_export_result.append(d[0]+' : Issue in file delivery on '+d[1])
                flag = 1
                break

# Getting RVS file's export date from Old_data.txt which is not in RVSWEB
    if flag == 0:
        for m in old_data:
            if app_file in m[0]:
                #print(m[0]+' : '+m[1])
                TPI_export_result.append(m[0]+' : last exported on '+m[1])

# Code for updating TPI_APP_Import_Files
TPI_import_result = []
for import_file in TPI_APP_import_files:
    flag = 0
    #print("export_file is")
    #print(import_file)
    for d in data_KT6:
         if import_file in d[0] and d[2] == 'END':
             #print("within if")
             #print(d[0]+' : '+d[1])
             TPI_import_result.append(d[0]+' : last exported on '+d[1])
             flag = 1
             for x in old_data:
                 #print("in old_data")
                 #print(x)
                 if import_file in x[0]:
                     x[1] = d[1]
                     #print('old_data '+ x[0]+' : '+x[1])
                     #print(old_data)
             break
         else:
             if import_file in d[0] and d[2] != 'END':
                #print("within if")
                #print(d[0]+' : '+d[1])
                if d[1] != today_str:
                    TPI_import_result.append(d[0]+' : No new file export and issue in file delivery on '+d[1])
                else:
                    TPI_import_result.append(d[0]+' : Issue in file delivery on '+d[1])
                flag = 1
                break

# Getting RVS file's import date from Old_data.txt which is not in RVSWEB
    if flag == 0:
        for m in old_data:
            if import_file in m[0]:
                #print(m[0]+' : '+m[1])
                TPI_import_result.append(m[0]+' : last exported on '+m[1])

# Final TPI lists having RVS filenames with updated date
TPI_export_final_result = '\n'.join(TPI_export_result)
logger.info("<<<<<<<<<< TPI EXPORT RVS FILES >>>>>>>>>>")
logger.info(TPI_export_final_result)
logger.info("")

TPI_import_final_result = '\n'.join(TPI_import_result)
logger.info("<<<<<<<<<< TPI IMPORT RVS FILES >>>>>>>>>>")
logger.info(TPI_import_final_result)
logger.info("")

# <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< Code for APOSNF Laodline >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> #
"""
# Defining APOSNF lists
APOSNF_APP_export_files = []
APOSNF_APP_import_files = []

# Reading RVS_files.txt and appending the RVS files in respecitve lists based on APP export & APP import
for file in RVS_files:
    if file[0] == 'APOSNF_APP_Export' and ".KT6" in file[1]:
        APOSNF_APP_export_files.append(file[1])
    elif file[0] == 'APOSNF_APP_Import' and "KT6." in file[1]:
        APOSNF_APP_import_files.append(file[1])
    else:
        pass

# Code for updating APOSNF_APP_Export_Files
APOSNF_export_result = []
for app_file in APOSNF_APP_export_files:
    flag = 0
    #print("export_file is")
    #print(app_file)
    for d in data_KT6:
         if app_file in d[0] and d[2] == 'END':
             #print("within if")
             #print(d[0]+' : '+d[1])
             APOSNF_export_result.append(d[0]+' : last exported on '+d[1])
             flag = 1
             for x in old_data:
                 #print("in old_data")
                 #print(x)
                 if app_file in x[0]:
                     x[1] = d[1]
                 if APOSNF_APP_import_files[0] in x[0]:  # Import file [DEL.KT6KT6.APOSPRO.ZIP] hard coded
                     #print(x[0])
                     x[1] = d[1]
                     #print(x[1])
                     #print('old_data '+ x[0]+' : '+x[1])
                     #print(old_data)
             break
         else:
             if app_file in d[0] and d[2] != 'END':
                #print("within if"))
                #print(d[0]+' : '+d[1])
                if d[1] != today_str:
                    APOSNF_export_result.append(d[0]+' : No new file export and issue in file delivery on '+d[1])
                else:
                    APOSNF_export_result.append(d[0]+' : Issue in file delivery on '+d[1])
                flag = 1
                break

# Getting RVS file's export date from Old_data.txt which is not in RVSWEB
    if flag == 0:
        for m in old_data:
            if app_file in m[0]:
                #print(m[0]+' : '+m[1])
                APOSNF_export_result.append(m[0]+' : last exported on '+m[1])

# Code for updating APOSNF_APP_Import_Files
APOSNF_import_result = []
for import_file in APOSNF_APP_import_files:
    flag = 0
    #print("export_file is")
    #print(import_file)
    for d in data_KT6:
         if import_file in d[0] and d[2] == 'END':
             #print("within if"))
             #print(d[0]+' : '+d[1])
             APOSNF_import_result.append(d[0]+' : last exported on '+d[1])
             flag = 1
             for x in old_data:
                 #print("in old_data")
                 #print(x)
                 if import_file in x[0]:
                     x[1] = d[1]
                     #print('old_data '+ x[0]+' : '+x[1])
                     #print(old_data)
             break
         else:
             if import_file in d[0] and d[2] != 'END':
                #print("within if"))
                #print(d[0]+' : '+d[1])
                if d[1] != today_str:
                    APOSNF_import_result.append(d[0]+' : No new file export and issue in file delivery on '+d[1])
                else:
                    APOSNF_import_result.append(d[0]+' : Issue in file delivery on '+d[1])
                flag = 1
                break

# Getting RVS file's Import date from Old_data.txt which is not in RVSWEB
    if flag == 0:
        for m in old_data:
            if import_file in m[0]:
                #print(m[0]+' : '+m[1])
                APOSNF_import_result.append(m[0]+' : last exported on '+m[1])

# Final APOSNF lists having RVS filenames with updated date
APOSNF_export_final_result = '\n'.join(APOSNF_export_result)
logger.info("<<<<<<<<<< APOSNF EXPORT RVS FILES >>>>>>>>>>")
logger.info(APOSNF_export_final_result)
logger.info("")

APOSNF_import_final_result = '\n'.join(APOSNF_import_result)
logger.info("<<<<<<<<<< APOSNF IMPORT RVS FILES >>>>>>>>>>")
logger.info(APOSNF_import_final_result)
logger.info("")
"""
# <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< Code for MC Laodline >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> #

# Defining MC lists
MC_DB_export_files = []
MC_APP_export_files = []
MC_APP_import_files = []

# Reading RVS_files.txt and appending the RVS files in respecitve lists based on DB export, APP export & APP import
for file in RVS_files:
    if file[0] == 'MC_DB_Export' and ".N1L" in file[1]:
        MC_DB_export_files.append(file[1])
    elif file[0] == 'MC_APP_Export' and ".KT6" in file[1]:
        MC_APP_export_files.append(file[1])
    elif file[0] == 'MC_APP_Import' and "KT6." in file[1]:
        MC_APP_import_files.append(file[1])
    else:
        pass

# Code for updating MC_DB_Export_Files
MC_export_result = []
for db_file in MC_DB_export_files:
    flag = 0
    #print("export_file is")
    #print(db_file)
    for d in data_N1L:
         if db_file in d[0] and d[2] == 'END':
             #print("within if"))
             #print(d[0]+' : '+d[1])
             MC_export_result.append(d[0]+' : last exported on '+d[1])
             flag = 1
             for x in old_data:
                 #print("in old_data")
                 #print(x)
                 if db_file in x[0]:
                     x[1] = d[1]
                     #print('old_data '+ x[0]+' : '+x[1])
                     #print(old_data)
             break
         else:
             if db_file in d[0] and d[2] != 'END':
                 #print("within if"))
                 #print(d[0]+' : '+d[1])
                 if d[1] != today_str:
                     MC_export_result.append(d[0]+' : No new file export and issue in file delivery on '+d[1])
                 else:
                     MC_export_result.append(d[0]+' : Issue in file delivery on '+d[1])
                 flag = 1
                 break

# Getting RVS file's export date from Old_data.txt which is not in RVSWEB
    if flag == 0:
        for m in old_data:
            if db_file in m[0]:
                #print(m[0]+' : '+m[1])
                MC_export_result.append(m[0]+' : last exported on '+m[1])

# Code for updating MC_APP_Export_Files
for app_file in MC_APP_export_files:
    flag = 0
    #print("export_file is")
    #print(app_file)
    for d in data_KT6:
         if app_file in d[0] and d[2] == 'END':
             #print("within if")
             #print(d[0]+' : '+d[1])
             MC_export_result.append(d[0]+' : last exported on '+d[1])
             flag = 1
             for x in old_data:
                 #print("in old_data")
                 #print(x)
                 if app_file in x[0]:
                     x[1] = d[1]
                     #print('old_data '+ x[0]+' : '+x[1])
                     #print(old_data)
             break
         else:
             if app_file in d[0] and d[2] != 'END':
                #print("within if")
                #print(d[0]+' : '+d[1])
                if d[1] != today_str:
                    MC_export_result.append(d[0]+' : No new file export and issue in file delivery on '+d[1])
                else:
                    MC_export_result.append(d[0]+' : Issue in file delivery on '+d[1])
                flag = 1
                break

# Getting RVS file's export date from Old_data.txt which is not in RVSWEB
    if flag == 0:
        for m in old_data:
            if app_file in m[0]:
                #print(m[0]+' : '+m[1])
                MC_export_result.append(m[0]+' : last exported on '+m[1])

# Code for updating MC_APP_Import_Files
MC_import_result = []
for import_file in MC_APP_import_files:
    flag = 0
    #print("export_file is")
    #print(import_file)
    for d in data_KT6:
         if import_file in d[0] and d[2] == 'END':
             #print("within if")
             #print(d[0]+' : '+d[1])
             MC_import_result.append(d[0]+' : last exported on '+d[1])
             flag = 1
             for x in old_data:
                 #print("in old_data")
                 #print(x)
                 if import_file in x[0]:
                     x[1] = d[1]
                     #print('old_data '+ x[0]+' : '+x[1])
                     #print(old_data)
             break
         else:
             if import_file in d[0] and d[2] != 'END':
                #print("within if")
                #print(d[0]+' : '+d[1])
                if d[1] != today_str:
                    MC_import_result.append(d[0]+' : No new file export and issue in file delivery on '+d[1])
                else:
                    MC_import_result.append(d[0]+' : Issue in file delivery on '+d[1])
                flag = 1
                break

# Getting RVS file's import date from Old_data.txt which is not in RVSWEB
    if flag == 0:
        for m in old_data:
            if import_file in m[0]:
                #print(m[0]+' : '+m[1])
                MC_import_result.append(m[0]+' : last exported on '+m[1])

# Final MC lists having RVS filenames with updated date
MC_export_final_result = '\n'.join(MC_export_result)
logger.info("<<<<<<<<<< MC EXPORT RVS FILES >>>>>>>>>>")
logger.info(MC_export_final_result)
logger.info("")

MC_import_final_result = '\n'.join(MC_import_result)
logger.info("<<<<<<<<<< MC IMPORT RVS FILES >>>>>>>>>>")
logger.info(MC_import_final_result)
logger.info("")

# <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< Code for TT Laodline >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> #

# Defining TT lists
TT_DB_export_files = []
TT_APP_export_files = []
TT_APP_import_files = []

# Reading RVS_files.txt and appending the RVS files in respecitve lists based on DB export, APP export & APP import
for file in RVS_files:
    if file[0] == 'TT_DB_Export' and ".N1L" in file[1]:
        TT_DB_export_files.append(file[1])
    elif file[0] == 'TT_APP_Export' and ".KT6" in file[1]:
        TT_APP_export_files.append(file[1])
    elif file[0] == 'TT_APP_Import' and "KT6." in file[1]:
        TT_APP_import_files.append(file[1])
    else:
        pass

# Code for updating TT_DB_Export_Files
TT_export_result = []
for db_file in TT_DB_export_files:
    flag = 0
    #print("export_file is")
    #print(db_file)
    for d in data_N1L:
         if db_file in d[0] and d[2] == 'END':
             #print("within if")
             #print(d[0]+' : '+d[1])
             TT_export_result.append(d[0]+' : last exported on '+d[1])
             flag = 1
             for x in old_data:
                 #print("in old_data")
                 #print(x)
                 if db_file in x[0]:
                     x[1] = d[1]
                     #print('old_data '+ x[0]+' : '+x[1])
                     #print(old_data)
             break
         else:
             if db_file in d[0] and d[2] != 'END':
                 #print("within if")
                 #print(d[0]+' : '+d[1])
                 if d[1] != today_str:
                     TT_export_result.append(d[0]+' : No new file export and issue in file delivery on '+d[1])
                 else:
                     TT_export_result.append(d[0]+' : Issue in file delivery on '+d[1])
                 flag = 1
                 break

# Getting RVS file's export date from Old_data.txt which is not in RVSWEB
    if flag == 0:
        for m in old_data:
            if db_file in m[0]:
                #print(m[0]+' : '+m[1])
                TT_export_result.append(m[0]+' : last exported on '+m[1])

# Code for updating TT_APP_Export_Files
for app_file in TT_APP_export_files:
    flag = 0
    #print("export_file is")
    #print(app_file)
    for d in data_KT6:
         if app_file in d[0] and d[2] == 'END':
             #print("within if")
             #print(d[0]+' : '+d[1])
             TT_export_result.append(d[0]+' : last exported on '+d[1])
             flag = 1
             for x in old_data:
                 #print("in old_data")
                 #print(x)
                 if app_file in x[0]:
                     x[1] = d[1]
                     #print('old_data '+ x[0]+' : '+x[1])
                     #print(old_data)
             break
         else:
             if app_file in d[0] and d[2] != 'END':
                #print("within if")
                #print(d[0]+' : '+d[1])
                if d[1] != today_str:
                    TT_export_result.append(d[0]+' : No new file export and issue in file delivery on '+d[1])
                else:
                    TT_export_result.append(d[0]+' : Issue in file delivery on '+d[1])
                flag = 1
                break

# Getting RVS file's export date from Old_data.txt which is not in RVSWEB
    if flag == 0:
        for m in old_data:
            if app_file in m[0]:
                #print(m[0]+' : '+m[1])
                TT_export_result.append(m[0]+' : last exported on '+m[1])

# Code for updating TT_APP_Import_Files
TT_import_result = []
for import_file in TT_APP_import_files:
    flag = 0
    #print("export_file is")
    #print(import_file)
    for d in data_KT6:
         if import_file in d[0] and d[2] == 'END':
             #print("within if")
             #print(d[0]+' : '+d[1])
             TT_import_result.append(d[0]+' : last exported on '+d[1])
             flag = 1
             for x in old_data:
                 #print("in old_data")
                 #print(x)
                 if import_file in x[0]:
                     x[1] = d[1]
                     #print('old_data '+ x[0]+' : '+x[1])
                     #print(old_data)
             break
         else:
             if import_file in d[0] and d[2] != 'END':
                #print("within if"))
                #print(d[0]+' : '+d[1])
                if d[1] != today_str:
                    TT_import_result.append(d[0]+' : No new file export and issue in file delivery on '+d[1])
                else:
                    TT_import_result.append(d[0]+' : Issue in file delivery on '+d[1])
                flag = 1
                break

# Getting RVS file's import date from Old_data.txt which is not in RVSWEB
    if flag == 0:
        for m in old_data:
            if import_file in m[0]:
                #print(m[0]+' : '+m[1])
                TT_import_result.append(m[0]+' : last exported on '+m[1])

# Final TT lists having RVS filenames with updated date
TT_export_final_result = '\n'.join(TT_export_result)
logger.info("<<<<<<<<<< TT EXPORT RVS FILES >>>>>>>>>>")
logger.info(TT_export_final_result)
logger.info("")

TT_import_final_result = '\n'.join(TT_import_result)
logger.info("<<<<<<<<<< TT IMPORT RVS FILES >>>>>>>>>>")
logger.info(TT_import_final_result)
logger.info("")

# <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< Code for AU Laodline >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> #

# Defining AU lists
AU_DB_export_files = []
AU_APP_export_files = []
AU_APP_import_files = []

# Reading RVS_files.txt and appending the RVS files in respecitve lists based on DB export, APP export & APP import
for file in RVS_files:
    if file[0] == 'AU_DB_Export' and ".N1L" in file[1]:
        AU_DB_export_files.append(file[1])
    elif file[0] == 'AU_APP_Export' and ".KT6" in file[1]:
        AU_APP_export_files.append(file[1])
    elif file[0] == 'AU_APP_Import' and "KT6." in file[1]:
        AU_APP_import_files.append(file[1])
    else:
        pass

# Code for updating AU_DB_Export_Files
AU_export_result = []
for db_file in AU_DB_export_files:
    flag = 0
    #print("export_file is")
    #print(db_file)
    for d in data_N1L:
         if db_file in d[0] and d[2] == 'END':
             #print("within if")
             #print(d[0]+' : '+d[1])
             AU_export_result.append(d[0]+' : last exported on '+d[1])
             flag = 1
             for x in old_data:
                 #print("in old_data")
                 #print(x)
                 if db_file in x[0]:
                     x[1] = d[1]
                     #print('old_data '+ x[0]+' : '+x[1])
                     #print(old_data)
             break
         else:
             if db_file in d[0] and d[2] != 'END':
                 #print("within if"))
                 #print(d[0]+' : '+d[1])
                 if d[1] != today_str:
                     AU_export_result.append(d[0]+' : No new file export and issue in file delivery on '+d[1])
                 else:
                     AU_export_result.append(d[0]+' : Issue in file delivery on '+d[1])
                 flag = 1
                 break

# Getting RVS file's export date from Old_data.txt which is not in RVSWEB
    if flag == 0:
        for m in old_data:
            if db_file in m[0]:
                #print(m[0]+' : '+m[1])
                AU_export_result.append(m[0]+' : last exported on '+m[1])

# Code for updating AU_APP_Export_Files
for app_file in AU_APP_export_files:
    flag = 0
    #print("export_file is")
    #print(app_file)
    for d in data_KT6:
         if app_file in d[0] and d[2] == 'END':
             #print("within if")
             #print(d[0]+' : '+d[1])
             AU_export_result.append(d[0]+' : last exported on '+d[1])
             flag = 1
             for x in old_data:
                 #print("in old_data")
                 #print(x)
                 if app_file in x[0]:
                     x[1] = d[1]
                     #print('old_data '+ x[0]+' : '+x[1])
                     #print(old_data)
             break
         else:
             if app_file in d[0] and d[2] != 'END':
                #print("within if")
                #print(d[0]+' : '+d[1])
                if d[1] != today_str:
                    AU_export_result.append(d[0]+' : No new file export and issue in file delivery on '+d[1])
                else:
                    AU_export_result.append(d[0]+' : Issue in file delivery on '+d[1])
                flag = 1
                break

# Getting RVS file's export date from Old_data.txt which is not in RVSWEB
    if flag == 0:
        for m in old_data:
            if app_file in m[0]:
                #print(m[0]+' : '+m[1])
                AU_export_result.append(m[0]+' : last exported on '+m[1])

# Code for updating AU_APP_Import_Files
AU_import_result = []
for import_file in AU_APP_import_files:
    flag = 0
    #print("export_file is")
    #print(import_file)
    for d in data_KT6:
         if import_file in d[0] and d[2] == 'END':
             #print("within if")
             #print(d[0]+' : '+d[1])
             AU_import_result.append(d[0]+' : last exported on '+d[1])
             flag = 1
             for x in old_data:
                 #print("in old_data")
                 #print(x)
                 if import_file in x[0]:
                     x[1] = d[1]
                     #print('old_data '+ x[0]+' : '+x[1])
                     #print(old_data)
             break
         else:
             if import_file in d[0] and d[2] != 'END':
                #print("within if")
                #print(d[0]+' : '+d[1])
                if d[1] != today_str:
                    AU_import_result.append(d[0]+' : No new file export and issue in file delivery on '+d[1])
                else:
                    AU_import_result.append(d[0]+' : Issue in file delivery on '+d[1])
                flag = 1
                break

# Getting RVS file's import date from Old_data.txt which is not in RVSWEB
    if flag == 0:
        for m in old_data:
            if import_file in m[0]:
                #print(m[0]+' : '+m[1])
                AU_import_result.append(m[0]+' : last exported on '+m[1])

# Final AU lists having RVS filenames with updated date
AU_export_final_result = '\n'.join(AU_export_result)
logger.info("<<<<<<<<<< AU EXPORT RVS FILES >>>>>>>>>>")
logger.info(AU_export_final_result)
logger.info("")

AU_import_final_result = '\n'.join(AU_import_result)
logger.info("<<<<<<<<<< AU IMPORT RVS FILES >>>>>>>>>>")
logger.info(AU_import_final_result)
logger.info("")

# <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< Code for APOS Laodline >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> #

# Defining APOS lists
APOS_DB_export_files = []
APOS_APP_export_files = []
APOS_APP_import_files = []

# Reading RVS_files.txt and appending the RVS files in respecitve lists based on DB export, APP export & APP import
for file in RVS_files:
    if file[0] == 'APOS_DB_Export' and ".N1L" in file[1]:
        APOS_DB_export_files.append(file[1])
    elif file[0] == 'APOS_APP_Export' and ".KT6" in file[1]:
        APOS_APP_export_files.append(file[1])
    elif file[0] == 'APOS_APP_Import' and "KT6." in file[1]:
        APOS_APP_import_files.append(file[1])
    else:
        pass

# Code for updating APOS_DB_Export_Files
APOS_export_result = []
for db_file in APOS_DB_export_files:
    flag = 0
    #print("export_file is")
    #print(db_file)
    for d in data_N1L:
         if db_file in d[0] and d[2] == 'END':
             #print("within if")
             #print(d[0]+' : '+d[1])
             APOS_export_result.append(d[0]+' : last exported on '+d[1])
             flag = 1
             for x in old_data:
                 #print("in old_data")
                 #print(x)
                 if db_file in x[0]:
                     x[1] = d[1]
                 if db_file == 'DEL.N1LN3L.AP.F.GPD.DMP':
                     if 'DEL.KMPKT6.APOS.DATA.ZIP' in x[0]:  # xTIME Import file [DEL.KMPKT6.APOS.DATA.ZIP] hard coded
                         #print(x[0])
                         x[1] = d[1]
                         #print(x[1])
                     #print('old_data '+ x[0]+' : '+x[1])
                     #print(old_data)
             break
         else:
             if db_file in d[0] and d[2] != 'END':
                 #print("within if")
                 #print(d[0]+' : '+d[1])
                 if d[1] != today_str:
                     APOS_export_result.append(d[0]+' : No new file export and issue in file delivery on '+d[1])
                 else:
                     APOS_export_result.append(d[0]+' : Issue in file delivery on '+d[1])
                 flag = 1
                 break

# Getting RVS file's export date from Old_data.txt which is not in RVSWEB
    if flag == 0:
        for m in old_data:
            if db_file in m[0]:
                #print(m[0]+' : '+m[1])
                APOS_export_result.append(m[0]+' : last exported on '+m[1])

# Code for updating APOS_APP_Export_Files
for app_file in APOS_APP_export_files:
    flag = 0
    #print("export_file is")
    #print(app_file)
    for d in data_KT6:
         if app_file in d[0] and d[2] == 'END':
             #print("within if")
             #print(d[0]+' : '+d[1])
             APOS_export_result.append(d[0]+' : last exported on '+d[1])
             flag = 1
             for x in old_data:
                 #print("in old_data")
                 #print(x)
                 if app_file in x[0]:
                     x[1] = d[1]
                     #print('old_data '+ x[0]+' : '+x[1])
                     #print(old_data)
             break
         else:
             if app_file in d[0] and d[2] != 'END':
                #print("within if")
                #print(d[0]+' : '+d[1])
                if d[1] != today_str:
                    APOS_export_result.append(d[0]+' : No new file export and issue in file delivery on '+d[1])
                else:
                    APOS_export_result.append(d[0]+' : Issue in file delivery on '+d[1])
                flag = 1
                break

# Getting RVS file's export date from Old_data.txt which is not in RVSWEB
    if flag == 0:
        for m in old_data:
            if app_file in m[0]:
                #print(m[0]+' : '+m[1])
                APOS_export_result.append(m[0]+' : last exported on '+m[1])

# Code for updating APOS_APP_Import_Files
APOS_import_result = []
for import_file in APOS_APP_import_files:
    flag = 0
    #print("export_file is")
    #print(import_file)
    for d in data_KT6:
         if import_file in d[0] and d[2] == 'END':
             #print("within if")
             #print(d[0]+' : '+d[1])
             APOS_import_result.append(d[0]+' : last exported on '+d[1])
             flag = 1
             for x in old_data:
                 #print("in old_data")
                 #print(x)
                 if import_file in x[0]:
                     x[1] = d[1]
                     #print('old_data '+ x[0]+' : '+x[1])
                     #print(old_data)
             break
         else:
             if import_file in d[0] and d[2] != 'END':
                #print("within if")
                #print(d[0]+' : '+d[1])
                if d[1] != today_str:
                    APOS_import_result.append(d[0]+' : No new file export and issue in file delivery on '+d[1])
                else:
                    APOS_import_result.append(d[0]+' : Issue in file delivery on '+d[1])
                flag = 1
                break

# Getting RVS file's import date from Old_data.txt which is not in RVSWEB
    if flag == 0:
        for m in old_data:
            if import_file in m[0]:
                #print(m[0]+' : '+m[1])
                APOS_import_result.append(m[0]+' : last exported on '+m[1])

# Final APOS lists having RVS filenames with updated date
APOS_export_final_result = '\n'.join(APOS_export_result)
logger.info("<<<<<<<<<< APOS EXPORT RVS FILES >>>>>>>>>>")
logger.info(APOS_export_final_result)
logger.info("")

APOS_import_final_result = '\n'.join(APOS_import_result)
logger.info("<<<<<<<<<< APOS IMPORT RVS FILES >>>>>>>>>>")
logger.info(APOS_import_final_result)
logger.info("")

# <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< Code for COK Laodline >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> #

# Defining COK lists
COK_DB_export_files = []
COK_APP_export_files = []

# Reading RVS_files.txt and appending the RVS files in respecitve lists based on DB export & APP export
for file in RVS_files:
    if file[0] == 'COK_DB_Export' and ".N1L" in file[1]:
        COK_DB_export_files.append(file[1])
    elif file[0] == 'COK_APP_Export' and ".KT6" in file[1]:
        COK_APP_export_files.append(file[1])
    else:
        pass

# Code for updating COK_DB_Export_Files
COK_export_result = []
for db_file in COK_DB_export_files:
    flag = 0
    #print("export_file is")
    #print(db_file)
    for d in data_N1L:
         if db_file in d[0] and d[2] == 'END':
             #print("within if")
             #print(d[0]+' : '+d[1])
             COK_export_result.append(d[0]+' : last exported on '+d[1])
             flag = 1
             for x in old_data:
                 #print("in old_data")
                 #print(x)
                 if db_file in x[0]:
                     x[1] = d[1]
                     #print('old_data '+ x[0]+' : '+x[1])
                     #print(old_data)
             break
         else:
             if db_file in d[0] and d[2] != 'END':
                 #print("within if")
                 #print(d[0]+' : '+d[1])
                 if d[1] != today_str:
                     COK_export_result.append(d[0]+' : No new file export and issue in file delivery on '+d[1])
                 else:
                     COK_export_result.append(d[0]+' : Issue in file delivery on '+d[1])
                 flag = 1
                 break

# Getting RVS file's export date from Old_data.txt which is not in RVSWEB
    if flag == 0:
        for m in old_data:
            if db_file in m[0]:
                #print(m[0]+' : '+m[1])
                COK_export_result.append(m[0]+' : last exported on '+m[1])

# Code for updating COK_APP_Export_Files
for app_file in COK_APP_export_files:
    flag = 0
    #print("export_file is")
    #print(app_file)
    for d in data_KT6:
         if app_file in d[0] and d[2] == 'END':
             #print("within if")
             #print(d[0]+' : '+d[1])
             COK_export_result.append(d[0]+' : last exported on '+d[1])
             flag = 1
             for x in old_data:
                 #print("in old_data")
                 #print(x)
                 if app_file in x[0]:
                     x[1] = d[1]
                     #print('old_data '+ x[0]+' : '+x[1])
                     #print(old_data)
             break
         else:
             if app_file in d[0] and d[2] != 'END':
                #print("within if")
                #print(d[0]+' : '+d[1])
                if d[1] != today_str:
                    COK_export_result.append(d[0]+' : No new file export and issue in file delivery on '+d[1])
                else:
                    COK_export_result.append(d[0]+' : Issue in file delivery on '+d[1])
                flag = 1
                break

# Getting RVS file's export date from Old_data.txt which is not in RVSWEB
    if flag == 0:
        for m in old_data:
            if app_file in m[0]:
                #print(m[0]+' : '+m[1])
                COK_export_result.append(m[0]+' : last exported on '+m[1])

# Final COK lists having RVS filenames with updated date
COK_export_final_result = '\n'.join(COK_export_result)
logger.info("<<<<<<<<<< COK EXPORT RVS FILES >>>>>>>>>>")
logger.info(COK_export_final_result)
logger.info("")

# <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< Code for EUTERM Laodline >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> #

# Defining EUTERM lists
EUTERM_DB_export_files = []

# Reading RVS_files.txt and appending the RVS files in respecitve lists based on DB export
for file in RVS_files:
    if file[0] == 'EUTERM_DB_Export' and ".N1L" in file[1]:
        EUTERM_DB_export_files.append(file[1])
    else:
        pass

# Code for updating EUTERM_DB_Export_Files
EUTERM_export_result = []
for db_file in EUTERM_DB_export_files:
    flag = 0
    #print("export_file is")
    #print(db_file)
    for d in data_N1L:
         if db_file in d[0] and d[2] == 'END':
             #print("within if")
             #print(d[0]+' : '+d[1])
             EUTERM_export_result.append(d[0]+' : last exported on '+d[1])
             flag = 1
             for x in old_data:
                 #print("in old_data")
                 #print(x)
                 if db_file in x[0]:
                     x[1] = d[1]
                     #print('old_data '+ x[0]+' : '+x[1])
                     #print(old_data)
             break
         else:
             if db_file in d[0] and d[2] != 'END':
                 #print("within if")
                 #print(d[0]+' : '+d[1])
                 if d[1] != today_str:
                     EUTERM_export_result.append(d[0]+' : No new file export and issue in file delivery on '+d[1])
                 else:
                     EUTERM_export_result.append(d[0]+' : Issue in file delivery on '+d[1])
                 flag = 1
                 break

# Getting RVS file's export date from Old_data.txt which is not in RVSWEB
    if flag == 0:
        for m in old_data:
            if db_file in m[0]:
                #print(m[0]+' : '+m[1])
                EUTERM_export_result.append(m[0]+' : last exported on '+m[1])

# Final EUTERM lists having RVS filenames with updated date
EUTERM_export_final_result = '\n'.join(EUTERM_export_result)
logger.info("<<<<<<<<<< EUTERM EXPORT RVS FILES >>>>>>>>>>")
logger.info(EUTERM_export_final_result)
logger.info("")

# <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< Code for DP Laodline >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> #

# Defining DP lists
DP_DB_export_files = []
DP_APP_export_files = []
DP_APP_import_files = []

# Reading RVS_files.txt and appending the RVS files in respecitve lists based on DB export, APP export & APP import
for file in RVS_files:
    if file[0] == 'DP_DB_Export' and ".N1L" in file[1]:
        DP_DB_export_files.append(file[1])
    elif file[0] == 'DP_APP_Export' and ".KT6" in file[1]:
        DP_APP_export_files.append(file[1])
    elif file[0] == 'DP_APP_Import' and "KT6." in file[1]:
        DP_APP_import_files.append(file[1])
    else:
        pass

# Code for updating DP_DB_Export_Files
DP_export_result = []
for db_file in DP_DB_export_files:
    flag = 0
    #print("export_file is")
    #print(db_file)
    for d in data_N1L:
         if db_file in d[0] and d[2] == 'END':
             #print("within if")
             #print(d[0]+' : '+d[1])
             DP_export_result.append(d[0]+' : last exported on '+d[1])
             flag = 1
             for x in old_data:
                 #print("in old_data")
                 #print(x)
                 if db_file in x[0]:
                     x[1] = d[1]
                     #print('old_data '+ x[0]+' : '+x[1])
                     #print(old_data)
             break
         else:
             if db_file in d[0] and d[2] != 'END':
                 #print("within if")
                 #print(d[0]+' : '+d[1])
                 if d[1] != today_str:
                     DP_export_result.append(d[0]+' : No new file export and issue in file delivery on '+d[1])
                 else:
                     DP_export_result.append(d[0]+' : Issue in file delivery on '+d[1])
                 flag = 1
                 break

# Getting RVS file's export date from Old_data.txt which is not in RVSWEB
    if flag == 0:
        for m in old_data:
            if db_file in m[0]:
                #print(m[0]+' : '+m[1])
                DP_export_result.append(m[0]+' : last exported on '+m[1])

# Code for updating DP_APP_Export_Files
for app_file in DP_APP_export_files:
    flag = 0
    #print("export_file is")
    #print(app_file)
    for d in data_KT6:
         if app_file in d[0] and d[2] == 'END':
             #print("within if")
             #print(d[0]+' : '+d[1])
             DP_export_result.append(d[0]+' : last exported on '+d[1])
             flag = 1
             for x in old_data:
                 #print("in old_data")
                 #print(x)
                 if app_file in x[0]:
                     x[1] = d[1]
                     #print('old_data '+ x[0]+' : '+x[1])
                     #print(old_data)
             break
         else:
             if app_file in d[0] and d[2] != 'END':
                #print("within if")
                #print(d[0]+' : '+d[1])
                if d[1] != today_str:
                    DP_export_result.append(d[0]+' : No new file export and issue in file delivery on '+d[1])
                else:
                    DP_export_result.append(d[0]+' : Issue in file delivery on '+d[1])
                flag = 1
                break

# Getting RVS file's export date from Old_data.txt which is not in RVSWEB
    if flag == 0:
        for m in old_data:
            if app_file in m[0]:
                #print(m[0]+' : '+m[1])
                DP_export_result.append(m[0]+' : last exported on '+m[1])

# Code for updating DP_APP_Import_Files
DP_import_result = []
for import_file in DP_APP_import_files:
    flag = 0
    #print("export_file is")
    #print(import_file)
    for d in data_KT6:
         if import_file in d[0] and d[2] == 'END':
             #print("within if")
             #print(d[0]+' : '+d[1])
             DP_import_result.append(d[0]+' : last exported on '+d[1])
             flag = 1
             for x in old_data:
                 #print("in old_data")
                 #print(x)
                 if import_file in x[0]:
                     x[1] = d[1]
                     #print('old_data '+ x[0]+' : '+x[1])
                     #print(old_data)
             break
         else:
             if import_file in d[0] and d[2] != 'END':
                #print("within if")
                #print(d[0]+' : '+d[1])
                if d[1] != today_str:
                    DP_import_result.append(d[0]+' : No new file export and issue in file delivery on '+d[1])
                else:
                    DP_import_result.append(d[0]+' : Issue in file delivery on '+d[1])
                flag = 1
                break

# Getting RVS file's import date from Old_data.txt which is not in RVSWEB
    if flag == 0:
        for m in old_data:
            if import_file in m[0]:
                #print(m[0]+' : '+m[1])
                DP_import_result.append(m[0]+' : last exported on '+m[1])

# Final DP lists having RVS filenames with updated date
DP_export_final_result = '\n'.join(DP_export_result)
logger.info("<<<<<<<<<< DP EXPORT RVS FILES >>>>>>>>>>")
logger.info(DP_export_final_result)
logger.info("")

DP_import_final_result = '\n'.join(DP_import_result)
logger.info("<<<<<<<<<< DP IMPORT RVS FILES >>>>>>>>>>")
logger.info(DP_import_final_result)
logger.info("")

# <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< Code for Translation Laodline >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> #

# Defining Translation lists
Translation_DB_export_files = []
Translation_APP_export_files = []
Translation_APP_import_files = []

# Reading RVS_files.txt and appending the RVS files in respecitve lists based on DB export, APP export & APP import
for file in RVS_files:
    if file[0] == 'Translation_DB_Export' and ".N1L" in file[1]:
        Translation_DB_export_files.append(file[1])
    elif file[0] == 'Translation_APP_Export' and ".KT6" in file[1]:
        Translation_APP_export_files.append(file[1])
    elif file[0] == 'Translation_APP_Import' and "KT6." in file[1]:
        Translation_APP_import_files.append(file[1])
    else:
        pass

# Code for updating Translation_DB_Export_Files
Translation_export_result = []
for db_file in Translation_DB_export_files:
    flag = 0
    #print("export_file is")
    #print(db_file)
    for d in data_N1L:
         if db_file in d[0] and d[2] == 'END':
             #print("within if"))
             #print(d[0]+' : '+d[1])
             Translation_export_result.append(d[0]+' : last exported on '+d[1])
             flag = 1
             for x in old_data:
                 #print("in old_data")
                 #print(x)
                 if db_file in x[0]:
                     x[1] = d[1]
                     #print('old_data '+ x[0]+' : '+x[1])
                     #print(old_data)
             break
         else:
             if db_file in d[0] and d[2] != 'END':
                 #print("within if")
                 #print(d[0]+' : '+d[1])
                 if d[1] != today_str:
                     Translation_export_result.append(d[0]+' : No new file export and issue in file delivery on '+d[1])
                 else:
                     Translation_export_result.append(d[0]+' : Issue in file delivery on '+d[1])
                 flag = 1
                 break

# Getting RVS file's export date from Old_data.txt which is not in RVSWEB
    if flag == 0:
        for m in old_data:
            if db_file in m[0]:
                #print(m[0]+' : '+m[1])
                Translation_export_result.append(m[0]+' : last exported on '+m[1])

# Code for updating Translation_APP_Export_Files
for app_file in Translation_APP_export_files:
    flag = 0
    #print("export_file is")
    #print(app_file)
    for d in data_KT6:
         if app_file in d[0] and d[2] == 'END':
             #print("within if")
             #print(d[0]+' : '+d[1])
             Translation_export_result.append(d[0]+' : last exported on '+d[1])
             flag = 1
             for x in old_data:
                 #print("in old_data")
                 #print(x)
                 if app_file in x[0]:
                     x[1] = d[1]
                     #print('old_data '+ x[0]+' : '+x[1])
                     #print(old_data)
             break
         else:
             if app_file in d[0] and d[2] != 'END':
                #print("within if")
                #print(d[0]+' : '+d[1])
                if d[1] != today_str:
                    Translation_export_result.append(d[0]+' : No new file export and issue in file delivery on '+d[1])
                else:
                    Translation_export_result.append(d[0]+' : Issue in file delivery on '+d[1])
                flag = 1
                break

# Getting RVS file's export date from Old_data.txt which is not in RVSWEB
    if flag == 0:
        for m in old_data:
            if app_file in m[0]:
                #print(m[0]+' : '+m[1])
                Translation_export_result.append(m[0]+' : last exported on '+m[1])

# Code for updating Translation_APP_Import_Files
Translation_import_result = []
for import_file in Translation_APP_import_files:
    flag = 0
    #print("export_file is")
    #print(import_file)
    for d in data_KT6:
         if import_file in d[0] and d[2] == 'END':
             #print("within if")
             #print(d[0]+' : '+d[1])
             Translation_import_result.append(d[0]+' : last exported on '+d[1])
             flag = 1
             for x in old_data:
                 #print("in old_data")
                 #print(x)
                 if import_file in x[0]:
                     x[1] = d[1]
                     #print('old_data '+ x[0]+' : '+x[1])
                     #print(old_data)
             break
         else:
             if import_file in d[0] and d[2] != 'END':
                #print("within if")
                #print(d[0]+' : '+d[1])
                if d[1] != today_str:
                    Translation_import_result.append(d[0]+' : No new file export and issue in file delivery on '+d[1])
                else:
                    Translation_import_result.append(d[0]+' : Issue in file delivery on '+d[1])
                flag = 1
                break

# Getting RVS file's import date from Old_data.txt which is not in RVSWEB
    if flag == 0:
        for m in old_data:
            if import_file in m[0]:
                #print(m[0]+' : '+m[1])
                Translation_import_result.append(m[0]+' : last exported on '+m[1])

# Final Translation lists having RVS filenames with updated date
Translation_export_final_result = '\n'.join(Translation_export_result)
logger.info("<<<<<<<<<< Translation EXPORT RVS FILES >>>>>>>>>>")
logger.info(Translation_export_final_result)
logger.info("")

Translation_import_final_result = '\n'.join(Translation_import_result)
logger.info("<<<<<<<<<< Translation IMPORT RVS FILES >>>>>>>>>>")
logger.info(Translation_import_final_result)
logger.info("")

# <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< Code for MT Laodline >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> #

# Defining MT lists
MT_DB_export_files = []
MT_APP_export_files = []
MT_APP_import_files = []

# Reading RVS_files.txt and appending the RVS files in respecitve lists based on DB export, APP export & APP import
for file in RVS_files:
    if file[0] == 'MT_DB_Export' and ".N1L" in file[1]:
        MT_DB_export_files.append(file[1])
    elif file[0] == 'MT_APP_Export' and ".KT6" in file[1]:
        MT_APP_export_files.append(file[1])
    elif file[0] == 'MT_APP_Import' and "KT6." in file[1]:
        MT_APP_import_files.append(file[1])
    else:
        pass

# Code for updating MT_DB_Export_Files
MT_export_result = []
for db_file in MT_DB_export_files:
    flag = 0
    #print("export_file is")
    #print(db_file)
    for d in data_N1L:
         if db_file in d[0] and d[2] == 'END':
             #print("within if")
             #print(d[0]+' : '+d[1])
             MT_export_result.append(d[0]+' : last exported on '+d[1])
             flag = 1
             for x in old_data:
                 #print("in old_data")
                 #print(x)
                 if db_file in x[0]:
                     x[1] = d[1]
                     #print('old_data '+ x[0]+' : '+x[1])
                     #print(old_data)
             break
         else:
             if db_file in d[0] and d[2] != 'END':
                 #print("within if")
                 #print(d[0]+' : '+d[1])
                 if d[1] != today_str:
                     MT_export_result.append(d[0]+' : No new file export and issue in file delivery on '+d[1])
                 else:
                     MT_export_result.append(d[0]+' : Issue in file delivery on '+d[1])
                 flag = 1
                 break

# Getting RVS file's export date from Old_data.txt which is not in RVSWEB
    if flag == 0:
        for m in old_data:
            if db_file in m[0]:
                #print(m[0]+' : '+m[1])
                MT_export_result.append(m[0]+' : last exported on '+m[1])

# Code for updating MT_APP_Export_Files
for app_file in MT_APP_export_files:
    flag = 0
    #print("export_file is")
    #print(app_file)
    for d in data_KT6:
         if app_file in d[0] and d[2] == 'END':
             #print("within if")
             #print(d[0]+' : '+d[1])
             MT_export_result.append(d[0]+' : last exported on '+d[1])
             flag = 1
             for x in old_data:
                 #print("in old_data")
                 #print(x)
                 if app_file in x[0]:
                     x[1] = d[1]
                     #print('old_data '+ x[0]+' : '+x[1])
                     #print(old_data)
             break
         else:
             if app_file in d[0] and d[2] != 'END':
                #print("within if")
                #print(d[0]+' : '+d[1])
                if d[1] != today_str:
                    MT_export_result.append(d[0]+' : No new file export and issue in file delivery on '+d[1])
                else:
                    MT_export_result.append(d[0]+' : Issue in file delivery on '+d[1])
                flag = 1
                break

# Getting RVS file's export date from Old_data.txt which is not in RVSWEB
    if flag == 0:
        for m in old_data:
            if app_file in m[0]:
                #print(m[0]+' : '+m[1])
                MT_export_result.append(m[0]+' : last exported on '+m[1])

# Code for updating MT_APP_Import_Files
MT_import_result = []
for import_file in MT_APP_import_files:
    flag = 0
    #print("export_file is")
    #print(import_file)
    for d in data_KT6:
         if import_file in d[0] and d[2] == 'END':
             #print("within if")
             #print(d[0]+' : '+d[1])
             MT_import_result.append(d[0]+' : last exported on '+d[1])
             flag = 1
             for x in old_data:
                 #print("in old_data")
                 #print(x)
                 if import_file in x[0]:
                     x[1] = d[1]
                     #print('old_data '+ x[0]+' : '+x[1])
                     #print(old_data)
             break
         else:
             if import_file in d[0] and d[2] != 'END':
                #print("within if")
                #print(d[0]+' : '+d[1])
                if d[1] != today_str:
                    MT_import_result.append(d[0]+' : No new file export and issue in file delivery on '+d[1])
                else:
                    MT_import_result.append(d[0]+' : Issue in file delivery on '+d[1])
                flag = 1
                break

# Getting RVS file's import date from Old_data.txt which is not in RVSWEB
    if flag == 0:
        for m in old_data:
            if import_file in m[0]:
                #print(m[0]+' : '+m[1])
                MT_import_result.append(m[0]+' : last exported on '+m[1])

# Final MT lists having RVS filenames with updated date
MT_export_final_result = '\n'.join(MT_export_result)
logger.info("<<<<<<<<<< MT EXPORT RVS FILES >>>>>>>>>>")
logger.info(MT_export_final_result)
logger.info("")

MT_import_final_result = '\n'.join(MT_import_result)
logger.info("<<<<<<<<<< MT IMPORT RVS FILES >>>>>>>>>>")
logger.info(MT_import_final_result)
logger.info("")

# <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< Code for EMN Laodline >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> #
"""
# Defining EMN lists
EMN_DB_export_files = []
EMN_APP_export_files = []
EMN_APP_import_files = []

# Reading RVS_files.txt and appending the RVS files in respecitve lists based on DB export, APP export & APP import
for file in RVS_files:
    if file[0] == 'EMN_DB_Export' and ".N1L" in file[1]:
        EMN_DB_export_files.append(file[1])
    elif file[0] == 'EMN_APP_Export' and ".KT6" in file[1]:
        EMN_APP_export_files.append(file[1])
    elif file[0] == 'EMN_APP_Import' and "KT6." in file[1]:
        EMN_APP_import_files.append(file[1])
    else:
        pass

# Code for updating EMN_DB_Export_Files
EMN_export_result = []
for db_file in EMN_DB_export_files:
    flag = 0
    #print("export_file is")
    #print(db_file)
    for d in data_N1L:
         if db_file in d[0] and d[2] == 'END':
             #print("within if")
             #print(d[0]+' : '+d[1])
             EMN_export_result.append(d[0]+' : last exported on '+d[1])
             flag = 1
             for x in old_data:
                 #print("in old_data")
                 #print(x)
                 if db_file in x[0]:
                     x[1] = d[1]
                     #print('old_data '+ x[0]+' : '+x[1])
                     #print(old_data)
             break
         else:
             if db_file in d[0] and d[2] != 'END':
                 #print("within if")
                 #print(d[0]+' : '+d[1])
                 if d[1] != today_str:
                     EMN_export_result.append(d[0]+' : No new file export and issue in file delivery on '+d[1])
                 else:
                     EMN_export_result.append(d[0]+' : Issue in file delivery on '+d[1])
                 flag = 1
                 break

# Getting RVS file's export date from Old_data.txt which is not in RVSWEB
    if flag == 0:
        for m in old_data:
            if db_file in m[0]:
                #print(m[0]+' : '+m[1])
                EMN_export_result.append(m[0]+' : last exported on '+m[1])

# Code for updating EMN_APP_Export_Files
for app_file in EMN_APP_export_files:
    flag = 0
    #print("export_file is")
    #print(app_file)
    for d in data_KT6:
         if app_file in d[0] and d[2] == 'END':
             #print("within if")
             #print(d[0]+' : '+d[1])
             EMN_export_result.append(d[0]+' : last exported on '+d[1])
             flag = 1
             for x in old_data:
                 #print("in old_data")
                 #print(x)
                 if app_file in x[0]:
                     x[1] = d[1]
                     #print('old_data '+ x[0]+' : '+x[1])
                     #print(old_data)
             break
         else:
             if app_file in d[0] and d[2] != 'END':
                #print("within if")
                #print(d[0]+' : '+d[1])
                if d[1] != today_str:
                    EMN_export_result.append(d[0]+' : No new file export and issue in file delivery on '+d[1])
                else:
                    EMN_export_result.append(d[0]+' : Issue in file delivery on '+d[1])
                flag = 1
                break

# Getting RVS file's export date from Old_data.txt which is not in RVSWEB
    if flag == 0:
        for m in old_data:
            if app_file in m[0]:
                #print(m[0]+' : '+m[1])
                EMN_export_result.append(m[0]+' : last exported on '+m[1])

# Code for updating EMN_APP_Import_Files
EMN_import_result = []
for import_file in EMN_APP_import_files:
    flag = 0
    #print("export_file is")
    #print(import_file)
    for d in data_KT6:
         if import_file in d[0] and d[2] == 'END':
             #print("within if")
             #print(d[0]+' : '+d[1])
             EMN_import_result.append(d[0]+' : last exported on '+d[1])
             flag = 1
             for x in old_data:
                 #print("in old_data")
                 #print(x)
                 if import_file in x[0]:
                     x[1] = d[1]
                     #print('old_data '+ x[0]+' : '+x[1])
                     #print(old_data)
             break
         else:
             if import_file in d[0] and d[2] != 'END':
                #print("within if")
                #print(d[0]+' : '+d[1])
                if d[1] != today_str:
                    EMN_import_result.append(d[0]+' : No new file export and issue in file delivery on '+d[1])
                else:
                    EMN_import_result.append(d[0]+' : Issue in file delivery on '+d[1])
                flag = 1
                break

# Getting RVS file's import date from Old_data.txt which is not in RVSWEB
    if flag == 0:
        for m in old_data:
            if import_file in m[0]:
                #print(m[0]+' : '+m[1])
                EMN_import_result.append(m[0]+' : last exported on '+m[1])

# Final EMN lists having RVS filenames with updated date
EMN_export_final_result = '\n'.join(EMN_export_result)
logger.info("<<<<<<<<<< EMN EXPORT RVS FILES >>>>>>>>>>")
logger.info(EMN_export_final_result)
logger.info("")

EMN_import_final_result = '\n'.join(EMN_import_result)
logger.info("<<<<<<<<<< EMN IMPORT RVS FILES >>>>>>>>>>")
logger.info(EMN_import_final_result)
logger.info("")
"""
# <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< Code for ELFI Laodline >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> #

# Defining ELFI lists
ELFI_DB_export_files = []
ELFI_APP_export_files = []
ELFI_APP_import_files = []

# Reading RVS_files.txt and appending the RVS files in respecitve lists based on DB export, APP export & APP import
for file in RVS_files:
    if file[0] == 'ELFI_DB_Export' and ".N1L" in file[1]:
        ELFI_DB_export_files.append(file[1])
    elif file[0] == 'ELFI_APP_Export' and ".KT6" in file[1]:
        ELFI_APP_export_files.append(file[1])
    elif file[0] == 'ELFI_APP_Import' and "KT6." in file[1]:
        ELFI_APP_import_files.append(file[1])
    else:
        pass

# Code for updating ELFI_DB_Export_Files
ELFI_export_result = []
for db_file in ELFI_DB_export_files:
    flag = 0
    #print("export_file is")
    #print(db_file)
    for d in data_N1L:
         if db_file in d[0] and d[2] == 'END':
             #print("within if")
             #print(d[0]+' : '+d[1])
             ELFI_export_result.append(d[0]+' : last exported on '+d[1])
             flag = 1
             for x in old_data:
                 #print("in old_data")
                 #print(x)
                 if db_file in x[0]:
                     x[1] = d[1]
                 if db_file == 'DEL.N1LN3L.EL.F.GPD.DMP':
                     if 'DEL.KT6KT6.EL.F.DRE.CSV' in x[0]:  # DRE Export file [DEL.KT6KT6.EL.F.DRE.CSV] hard coded
                         #print(x[0])
                         x[1] = d[1]
                         #print(x[1])
                     #print('old_data '+ x[0]+' : '+x[1])
                     #print(old_data)
             break
         else:
             if db_file in d[0] and d[2] != 'END':
                 #print("within if")
                 #print(d[0]+' : '+d[1])
                 if d[1] != today_str:
                     ELFI_export_result.append(d[0]+' : No new file export and issue in file delivery on '+d[1])
                 else:
                     ELFI_export_result.append(d[0]+' : Issue in file delivery on '+d[1])
                 flag = 1
                 break

# Getting RVS file's export date from Old_data.txt which is not in RVSWEB
    if flag == 0:
        for m in old_data:
            if db_file in m[0]:
                #print(m[0]+' : '+m[1])
                ELFI_export_result.append(m[0]+' : last exported on '+m[1])

# Code for updating ELFI_APP_Export_Files
for app_file in ELFI_APP_export_files:
    flag = 0
    #print("export_file is")
    #print(app_file)
    for d in data_KT6:
         if app_file in d[0] and d[2] == 'END':
             #print("within if")
             #print(d[0]+' : '+d[1])
             ELFI_export_result.append(d[0]+' : last exported on '+d[1])
             flag = 1
             for x in old_data:
                 #print("in old_data")
                 #print(x)
                 if app_file in x[0]:
                     x[1] = d[1]
                     #print('old_data '+ x[0]+' : '+x[1])
                     #print(old_data)
             break
         else:
             if app_file in d[0] and d[2] != 'END':
                #print("within if")
                #print(d[0]+' : '+d[1])
                if d[1] != today_str:
                    ELFI_export_result.append(d[0]+' : No new file export and issue in file delivery on '+d[1])
                else:
                    ELFI_export_result.append(d[0]+' : Issue in file delivery on '+d[1])
                flag = 1
                break

# Getting RVS file's export date from Old_data.txt which is not in RVSWEB
    if flag == 0:
        for m in old_data:
            if app_file in m[0]:
                #print(m[0]+' : '+m[1])
                ELFI_export_result.append(m[0]+' : last exported on '+m[1])

# Code for updating ELFI_APP_Import_Files
ELFI_import_result = []
for import_file in ELFI_APP_import_files:
    flag = 0
    #print("export_file is")
    #print(import_file)
    for d in data_KT6:
         if import_file in d[0] and d[2] == 'END':
             #print("within if")
             #print(d[0]+' : '+d[1])
             ELFI_import_result.append(d[0]+' : last exported on '+d[1])
             flag = 1
             for x in old_data:
                 #print("in old_data")
                 #print(x)
                 if import_file in x[0]:
                     x[1] = d[1]
                     #print('old_data '+ x[0]+' : '+x[1])
                     #print(old_data)
             break
         else:
             if import_file in d[0] and d[2] != 'END':
                #print("within if")
                #print(d[0]+' : '+d[1])
                if d[1] != today_str:
                    ELFI_import_result.append(d[0]+' : No new file export and issue in file delivery on '+d[1])
                else:
                    ELFI_import_result.append(d[0]+' : Issue in file delivery on '+d[1])
                flag = 1
                break

# Getting RVS file's import date from Old_data.txt which is not in RVSWEB
    if flag == 0:
        for m in old_data:
            if import_file in m[0]:
                #print(m[0]+' : '+m[1])
                ELFI_import_result.append(m[0]+' : last exported on '+m[1])

# Final ELFI lists having RVS filenames with updated date
ELFI_export_final_result = '\n'.join(ELFI_export_result)
logger.info("<<<<<<<<<< ELFI EXPORT RVS FILES >>>>>>>>>>")
logger.info(ELFI_export_final_result)
logger.info("")

ELFI_import_final_result = '\n'.join(ELFI_import_result)
logger.info("<<<<<<<<<< ELFI IMPORT RVS FILES >>>>>>>>>>")
logger.info(ELFI_import_final_result)
logger.info("")


# Code for opening & updating the Old_data.txt file with latest RVS file date
logger.info("<<<<<<<<<< OLD DATA FILES >>>>>>>>>>")

f = open("C:/Daily_Report_ELSADCP/Old_data.txt", "w")
for o in old_data:
    #print(o[0]+','+o[1])
    logger.info(o[0]+','+o[1])
    f.write(o[0]+','+o[1] + '\n')
f.close()

# Code for finding the excel filename
import os  # in-build module
path = "C:/Daily_Report_ELSADCP/"
for x in os.listdir(path):
    if x.endswith(".xlsx"):
        #print(path+x)
        filename = path+x

# Code for updating the excel sheet
import openpyxl  # pip install openpyxl

from openpyxl import load_workbook
workbook = load_workbook(filename)
sheet = workbook.active

sheet['A2'] = "Date - "+today.strftime('%d.%m.%Y')
sheet['C4'] = SLP_import_final_result
sheet['D4'] = SLP_export_final_result
sheet['C5'] = KDS_import_final_result
sheet['D5'] = KDS_export_final_result
sheet['C6'] = SNK_import_final_result
sheet['D6'] = SNK_export_final_result
sheet['C7'] = WI_import_final_result
sheet['D7'] = WI_export_final_result
sheet['C8'] = 'NA'
sheet['D8'] = FOD_export_final_result
sheet['C9'] = TRANS_import_final_result
sheet['D9'] = TRANS_export_final_result
sheet['C10'] = TPI_import_final_result
sheet['D10'] = TPI_export_final_result
# sheet['C11'] = APOSNF_import_final_result
# sheet['D11'] = APOSNF_export_final_result
sheet['C11'] = MC_import_final_result
sheet['D11'] = MC_export_final_result
sheet['C12'] = TT_import_final_result
sheet['D12'] = TT_export_final_result
sheet['C13'] = AU_import_final_result
sheet['D13'] = AU_export_final_result
sheet['C14'] = APOS_import_final_result
sheet['D14'] = APOS_export_final_result
sheet['C15'] = 'NA'
sheet['D15'] = COK_export_final_result
sheet['C16'] = DP_import_final_result
sheet['D16'] = DP_export_final_result
sheet['C17'] = 'NA'
sheet['D17'] = EUTERM_export_final_result
sheet['C18'] = Translation_import_final_result
sheet['D18'] = Translation_export_final_result
sheet['C19'] = MT_import_final_result
sheet['D19'] = MT_export_final_result
#sheet['C21'] = EMN_import_final_result
#sheet['D21'] = EMN_export_final_result
sheet['C20'] = ELFI_import_final_result
sheet['D20'] = ELFI_export_final_result

workbook.save(filename)
workbook.close()

# # Code to update excel in Git repository  [****It's working code but due to security concerns GIT is not used****]
# from github import Github   #pip install PyGithub, requests
# g = Github('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')  # Git Account Token
#
# path = "C:/Daily_Report_ELSADCP/Daily_Job_Checklist_ELSADCP.xlsx"  # Path of the file from which content needs to be updated in GIT repo
# with open(path, 'rb') as file:
#     data = file.read()
#
# repo = g.get_repo('mayurcodify/Python_for_Begineers')  # Git Repository
# file = repo.get_contents("/Daily_Job_Checklist_ELSADCP.xlsx")  # Path of the file present in GIT which need to be updated
# repo.update_file("Daily_Job_Checklist_ELSADCP.xlsx", "Updated on "+today.strftime('%d.%m.%y %H:%M'), data, file.sha)  # Path of the file present in GIT which needd to be updated

# # Code to update Old_data.txt in Git repository  [****It's working code but due to security concerns GIT is not used****]
# from github import Github   #pip install PyGithub, requests
# g = Github('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')  # Git Account Token
#
# path = "C:/Daily_Report_ELSADCP/Old_data.txt"  # Path of the file from which content needs to be updated in GIT repo
# with open(path, 'r') as file:
#     data = file.read()
#
# repo = g.get_repo('mayurcodify/Python_for_Begineers')  # Git Repository
# file = repo.get_contents("/Old_data.txt")  # Path of the file present in GIT which need to be updated
# repo.update_file("Old_data.txt", "Updated on "+today.strftime('%d.%m.%y %H:%M'), data, file.sha)  # Path of the file present in GIT which needd to be updated

# Copy the files from local directory to Ondrive shared location
shutil.copyfile('C:/Daily_Report_ELSADCP/Old_data.txt', old_date_path)
#shutil.copyfile('C:/Daily_Report_ELSADCP/Daily_Job_Checklist_ELSADCP.xlsx', excel_path)
# shutil.copyfile('C:/Daily_Report_ELSADCP/RVS_Files.txt', rvs_files_path)

# # Renaming the excel file name with latest date
# import os  # in-build module
# path = "C:/Daily_Report_ELSADCP/"
# new_file = "Daily_Job_Checklist_ELSADCP_"+today.strftime('%d.%m.%Y')+".xlsx"
# new_filename = path+new_file
#
# for x in os.listdir(path):
#     if x.endswith(".xlsx"):
#         #print(path+x)
#         logger.info("")
#         logger.info("New File name : "+ new_filename)
#         os.rename(filename, new_filename)

# Calculating total execution time
end = time.time()
logger.info("")
logger.info("Total time taken : " + str(round(end - start, 2)) +" seconds")
print("Total time taken : " + str(round(end - start, 2)) +" seconds")
